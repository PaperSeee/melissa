"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/storage.ts":
/*!************************!*\
  !*** ./lib/storage.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageManager: function() { return /* binding */ StorageManager; }\n/* harmony export */ });\nconst STORAGE_KEYS = {\n    CHARGE_HISTORY: \"charge-history\",\n    SETTINGS: \"app-settings\",\n    LAST_NOTIFICATION: \"last-notification\",\n    BATTERY_LEVEL: \"current-battery-level\"\n};\nclass StorageManager {\n    static getChargeHistory() {\n        if (false) {}\n        try {\n            const history = localStorage.getItem(STORAGE_KEYS.CHARGE_HISTORY);\n            return history ? JSON.parse(history) : [];\n        } catch (e) {\n            return [];\n        }\n    }\n    static addChargeRecord(batteryLevel) {\n        const now = new Date();\n        const record = {\n            id: crypto.randomUUID(),\n            date: now.toISOString().split(\"T\")[0],\n            time: now.toLocaleTimeString(\"fr-FR\", {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            }),\n            timestamp: now.getTime(),\n            batteryLevel\n        };\n        const history = this.getChargeHistory();\n        history.unshift(record); // Ajouter au dÃ©but\n        // Garder seulement les 100 derniers enregistrements\n        if (history.length > 100) {\n            history.splice(100);\n        }\n        localStorage.setItem(STORAGE_KEYS.CHARGE_HISTORY, JSON.stringify(history));\n        return record;\n    }\n    static getSettings() {\n        if (false) {}\n        try {\n            const settings = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n            return settings ? JSON.parse(settings) : {\n                notifications: true,\n                reminderInterval: 360\n            };\n        } catch (e) {\n            return {\n                notifications: true,\n                reminderInterval: 360\n            };\n        }\n    }\n    static updateSettings(settings) {\n        const current = this.getSettings();\n        const updated = {\n            ...current,\n            ...settings\n        };\n        if (true) {\n            localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(updated));\n        }\n    }\n    static getCurrentBatteryLevel() {\n        if (false) {}\n        try {\n            const batteryData = localStorage.getItem(STORAGE_KEYS.BATTERY_LEVEL);\n            if (!batteryData) return null;\n            const { level, timestamp } = JSON.parse(batteryData);\n            const now = Date.now();\n            const hoursPassed = (now - timestamp) / (1000 * 60 * 60);\n            // Simuler une baisse de batterie : 3-7% par heure selon l'usage\n            const batteryDrain = Math.random() * 4 + 3; // Entre 3% et 7% par heure\n            const simulatedLevel = Math.max(0, level - hoursPassed * batteryDrain);\n            return Math.round(simulatedLevel);\n        } catch (e) {\n            return null;\n        }\n    }\n    static setCurrentBatteryLevel(level) {\n        if (false) {}\n        const batteryData = {\n            level,\n            timestamp: Date.now()\n        };\n        localStorage.setItem(STORAGE_KEYS.BATTERY_LEVEL, JSON.stringify(batteryData));\n    }\n    static getLastNotificationTime() {\n        if (false) {}\n        return parseInt(localStorage.getItem(STORAGE_KEYS.LAST_NOTIFICATION) || \"0\");\n    }\n    static setLastNotificationTime(timestamp) {\n        if (false) {}\n        localStorage.setItem(STORAGE_KEYS.LAST_NOTIFICATION, timestamp.toString());\n    }\n    static clearHistory() {\n        localStorage.removeItem(STORAGE_KEYS.CHARGE_HISTORY);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/storage.ts\n"));

/***/ })

});